{"version":3,"sources":["socket/SocketConnection.js","hooks/useSocket.js","containers/LiveChart.js","components/Chart.js","utils/Utils.js"],"names":["SocketConnection","this","socket","io","emit","state","useSocket","useState","socketData","setSocketData","socketError","setSocketError","useEffect","socketInstance","subscribe","on","data","err","unsubscribe","LiveChart","mappedData","split","convertStrArrayToObjArray","JSON","stringify","CandleStickChart","props","type","width","ratio","xAccessor","d","date","xExtents","last","length","height","margin","left","right","top","bottom","seriesName","xScale","scaleTime","id","yExtents","high","low","axisAt","orient","ticks","timeIntervalBarWidth","utcDay","React","Component","defaultProps","fitWidth","arr","sortedArray","map","item","reduce","trim","slice","sort","a","b","ascending","acc","cur","i","key","strDate","milliseconds","parseInt","Date","getISTDate"],"mappings":"oNAEqBA,E,WACjB,aAAc,oBACVC,KAAKC,OAASC,IAAG,gC,wDAGjBF,KAAKC,OAAOE,KAAK,MAAO,CAACC,OAAM,M,oCAI/BJ,KAAKC,OAAOE,KAAK,QAAS,CAACC,OAAM,Q,KC+B1BC,EAhCG,WAAO,IAAD,EACgBC,mBAAS,MADzB,mBACbC,EADa,KACDC,EADC,OAEkBF,mBAAS,MAF3B,mBAEbG,EAFa,KAEAC,EAFA,KA6BpB,OApBAC,qBAAU,WACN,IAAIC,EAAkB,IAAIb,EAC1Ba,EAAeC,YAWf,OARID,EAAeX,OAAOa,GAAG,QAAQ,SAACC,GAC9BP,EAAcO,MAElBH,EAAeX,OAAOa,GAAG,SAAS,SAACE,GAC/BN,EAAeM,MAIhB,WACHJ,EAAeK,cACfL,EAAiB,SAKlB,CAACL,aAAYE,gBCXTS,UAtBG,WAAO,IAAD,EACcb,IAA3BE,EADa,EACbA,WAEHY,GAHgB,EACDV,YACH,kCAAkCW,MAAM,KACvC,IAajB,OAZGb,IACCY,EAAaE,YAA0B,CAACd,GAAY,CAAC,OAAO,OAAO,OAAO,MAAM,QAAQ,YAUhF,8DAAoCe,KAAKC,UAAUJ,M,+ICR7DK,E,uKACK,IAAD,EAC6BxB,KAAKyB,MAAlCC,EADA,EACAA,KAAMC,EADN,EACMA,MAAOZ,EADb,EACaA,KAAMa,EADnB,EACmBA,MACrBC,EAAY,SAAAC,GAAC,OAAIA,EAAEC,MACnBC,EAAW,CAChBH,EAAUI,eAAKlB,IACfc,EAAUd,EAAKA,EAAKmB,OAAS,OAE9B,OACC,kBAAC,IAAD,CAAaC,OAAQ,IACnBP,MAAOA,EACPD,MAAOA,EACPS,OAAQ,CAAEC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAChDd,KAAMA,EACNe,WAAW,OACX1B,KAAMA,EACNc,UAAWA,EACXa,OAAQC,cACRX,SAAUA,GAEX,kBAAC,IAAD,CAAOY,GAAI,EAAGC,SAAU,SAAAf,GAAC,MAAI,CAACA,EAAEgB,KAAMhB,EAAEiB,OACvC,kBAAC,QAAD,CAAOC,OAAO,SAASC,OAAO,SAASC,MAAO,IAC9C,kBAAC,QAAD,CAAOF,OAAO,OAAOC,OAAO,OAAOC,MAAO,IAC1C,kBAAC,oBAAD,CAAmBvB,MAAOwB,+BAAqBC,a,GAvBrBC,IAAMC,WAqCrC9B,EAAiB+B,aAAe,CAC/B7B,KAAM,OAEPF,EAAmBgC,mBAAShC,GAEbA,O,gCCvDf,8CAMcH,EAA4B,SAACoC,GAAqB,IAAhBhC,EAAe,uDAAP,GACpD,IAAIgC,EAAIvB,SAAWT,EAAMS,OAAQ,MAAO,GAQxC,IAAMwB,GAPND,EAAMA,EAAIE,KAAI,SAAAC,GAIV,OAHGA,IACCA,EAAOC,EAAOpC,EAAOmC,EAAKE,OAAO1C,MAAM,OAEpCwC,MAGaG,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUC,YAAUF,EAAElC,KAAMmC,EAAEnC,SACnE,OAAO2B,GAQEG,EAAS,SAACpC,EAAOgC,GAYxB,OAXUA,EAAII,QAAO,SAACO,EAAKC,EAAKC,GAC9B,IAAMC,EAAM9C,EAAM6C,GAQlB,OAPGC,IAEKH,EAAIG,GADG,SAARA,EAWR,SAAoBC,GACvB,IAAMC,EAAeC,SAASF,GAEjC,OADyB,IAAIG,KAAKF,GAZRG,CAAWP,GAEXA,GAGZD,IACN","file":"static/js/6.ec74254c.chunk.js","sourcesContent":["\nimport io from 'socket.io-client';\nexport default class SocketConnection {\n    constructor(){\n        this.socket = io('http://kaboom.rksv.net/watch');\n    }\n    subscribe(){\n        this.socket.emit('sub', {state:true});\n    }\n\n    unsubscribe(){\n        this.socket.emit('unsub', {state:false});\n    }\n}","import {useState, useEffect} from 'react';\nimport SocketConnection from '../socket/SocketConnection';\n/**\n * \n * @param {*} data \n * @param {*} api \n * @param {*} method \n * this hooks is common to make any CRUD(GET POST,PUT,DELETE) operation just need to pass\n * these three params;\n */\nconst useSocket = () => {\n    const [socketData, setSocketData] = useState(null);\n    const [socketError, setSocketError] = useState(null);\n    /**\n     * call useEffect here that takes a call back function and work like\n     * life cycles of statefull component:\n     * componentDidMount, componentDidUpdate, componentWillUnmount\n     * Note: Do not put useEffect in any conditional blocks its always on top.\n     * */\n    useEffect(() => {\n        let socketInstance  = new SocketConnection();\n        socketInstance.subscribe();\n        //safe to call any api or subscribe some observable or event.\n        const fetchData = () => {\n            socketInstance.socket.on('data', (data) => {\n                setSocketData(data);\n            })\n            socketInstance.socket.on('error', (err) => {\n                setSocketError(err);\n            })\n        }\n        fetchData();\n        return () => {\n            socketInstance.unsubscribe();\n            socketInstance = null;\n        }\n    }); \n\n    //return the object with this updated values.\n    return {socketData, socketError}\n}\n\nexport default useSocket","import React from 'react'\nimport Chart from '../components/Chart';\nimport { convertStrArrayToObjArray } from \"../utils/Utils\"\n\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\nimport useSocket from '../hooks/useSocket';\nconst LiveChart = () => {\n    const {socketData, socketError} = useSocket();\n    const headers = 'date,open,high,low,close,volume'.split(',');\n    let mappedData = []\n    if(socketData){\n        mappedData = convertStrArrayToObjArray([socketData],['date','open','high','low','close','volume'])\n    }\n    /**\n     * Display chart here, updated chart, May be I need to read more about D3 live chart.\n     * I am leaving here for now. This <Chart> component expecting different date\n     * but in live update date is unique others properties are changing I think.\n     */\n    // const elm = mappedData.length ? (<TypeChooser>\n    //         {type => <Chart type={type} data={mappedData} />}\n    //     </TypeChooser>): <div>Fetching Data....</div>\n    const elm = <div>Display Live chart here data: {JSON.stringify(mappedData)}</div>\n    return(\n        elm\n    )\n    \n}\n\nexport default LiveChart","\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { scaleTime } from \"d3-scale\";\nimport { utcDay } from \"d3-time\";\n\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { CandlestickSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last, timeIntervalBarWidth } from \"react-stockcharts/lib/utils\";\n\nclass CandleStickChart extends React.Component {\n\trender() {\n\t\tconst { type, width, data, ratio } = this.props;\n\t\tconst xAccessor = d => d.date;\n\t\tconst xExtents = [\n\t\t\txAccessor(last(data)),\n\t\t\txAccessor(data[data.length - 100])\n\t\t];\n\t\treturn (\n\t\t\t<ChartCanvas height={400}\n\t\t\t\t\tratio={ratio}\n\t\t\t\t\twidth={width}\n\t\t\t\t\tmargin={{ left: 50, right: 50, top: 10, bottom: 30 }}\n\t\t\t\t\ttype={type}\n\t\t\t\t\tseriesName=\"MSFT\"\n\t\t\t\t\tdata={data}\n\t\t\t\t\txAccessor={xAccessor}\n\t\t\t\t\txScale={scaleTime()}\n\t\t\t\t\txExtents={xExtents}>\n\n\t\t\t\t<Chart id={1} yExtents={d => [d.high, d.low]}>\n\t\t\t\t\t<XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={6}/>\n\t\t\t\t\t<YAxis axisAt=\"left\" orient=\"left\" ticks={5} />\n\t\t\t\t\t<CandlestickSeries width={timeIntervalBarWidth(utcDay)}/>\n\t\t\t\t</Chart>\n\t\t\t</ChartCanvas>\n\t\t);\n\t}\n}\n\nCandleStickChart.propTypes = {\n\tdata: PropTypes.array.isRequired,\n\twidth: PropTypes.number.isRequired,\n\tratio: PropTypes.number.isRequired,\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n};\n\nCandleStickChart.defaultProps = {\n\ttype: \"svg\",\n};\nCandleStickChart = fitWidth(CandleStickChart);\n\nexport default CandleStickChart;\n","import {ascending} from 'd3-array';\n\n/**\n * convert string to array and create object with given props\n * @param {*} str \n */\n export const convertStrArrayToObjArray = (arr, props = []) => {\n    if(!arr.length && !props.length) return [];\n    arr = arr.map(item => {\n        if(item){\n            item = reduce(props, item.trim().split(','));\n        }\n        return item;\n    });\n    \n    const sortedArray = arr.slice().sort((a, b) => ascending(a.date, b.date))\n    return sortedArray;\n}\n\n/**\n * it returns object \n * @param {*} props \n * @param {*} arr \n */\nexport const reduce = (props, arr) => {\n    const obj = arr.reduce((acc, cur, i) =>{\n        const key = props[i];\n        if(key){\n            if(key === 'date'){\n                acc[key] = getISTDate(cur);\n            } else{\n                acc[key] = cur;\n            }\n        }\n        return acc;\n      }, {});\n      return obj;\n}\n\nexport function getISTDate(strDate) {\n    const milliseconds = parseInt(strDate);\n    const convertedDate = new Date(milliseconds);\n\treturn convertedDate\n}\n\n\n"],"sourceRoot":""}