{"version":3,"sources":["components/ErrorBoundary.js","routers/DynamicRouters.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","info","console","log","this","children","React","Component","DynamicRouters","Home","lazy","LiveChart","PageNotFound","className","to","fallback","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uRA4BeA,E,kDAzBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,UAAS,GAHC,E,8DAYAC,EAAOC,GACrBC,QAAQC,IAAI,UAAWH,K,+BAKvB,OADAE,QAAQC,IAAI,qBAAsBC,KAAKN,MAAMC,UAC1CK,KAAKN,MAAMC,UACVG,QAAQC,IAAI,eACJ,sDAELC,KAAKP,MAAMQ,Y,kDAblB,OADAH,QAAQC,IAAI,uBACL,CAACJ,UAAS,O,GAVGO,IAAMC,WC6CnBC,EA5BQ,WACnB,IAAMC,EAAOC,gBAAK,kBAAM,8DAClBC,EAAYD,gBAAK,kBAAM,8DACvBE,EAAeF,gBAAK,kBAAM,iCAsBhC,OApBA,yBAAKG,UAAU,oBACf,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,kBAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,cAAT,gBAGR,kBAAC,EAAD,KACA,kBAAC,WAAD,CAAUC,SAAU,4CACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,aAAaC,UAAWP,IAC1C,kBAAC,IAAD,CAAOO,UAAWN,SC3BXO,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCMAO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACf+B,UAAUC,cAAcQ,YAI1BpC,QAAQC,IACN,iHAKEyB,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB/B,QAAQC,IAAI,sCAGRyB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAzC,GACLE,QAAQF,MAAM,4CAA6CA,MCzFjE0C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDSnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,QAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,QAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLvC,QAAQC,IACN,oEAvFA2D,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC9B,QAAQC,IACN,iHAMJuB,EAAgBC,EAAOC,OC/B/BE,K","file":"static/js/main.7b27d54b.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError:false\n        }\n    }\n\n    static getDerivedStateFromError(){\n        console.log('HERE error occurred')\n        return {hasError:true}\n    }\n\n    componentDidCatch(error, info){\n        console.log('error::', error)\n    }\n\n    render(){\n        console.log('boundary logged:::', this.state.hasError)\n        if(this.state.hasError){\n            console.log('rendered:::')\n            return (<div>Something went wrong</div>)\n        }\n        return this.props.children\n    }\n}\nexport default ErrorBoundary","import React,{Suspense, lazy} from 'react';\nimport {Route, Link, Switch} from 'react-router-dom';\nimport ErrorBoundary from '../components/ErrorBoundary';\n/**\n * difference between router component pros and reder pros:\n * component prop: component create new instance of the component and it will go through the\n * lifecycle constructor, componentWillmount, componentDidMount.\n * So if we goto next and prev it will mounted, unmounted and again mounted.\n * Ex:<Route path=\"/:locale/store\">\n        <Store /> //calling as new component.\n    </Route>\n\n * render prop: it will call as function and it did not create any new instances\n * of component. if component instance already created then it will just return that\n * comopnent. EX.\n * <Route path=\"/:locale/store\">\n    {Store()}//calling as function\n    </Route>\n */\nconst DynamicRouters = () => {\n    const Home = lazy(() => import('../containers/Home'));\n    const LiveChart = lazy(() => import('../containers/LiveChart'));\n    const PageNotFound = lazy(() => import('../components/PageNotFound'));\n    const routes =\n    <div className='router-container'> \n    <ul>\n        <li>\n            <Link to='/'>Home/Overview</Link>\n        </li>\n        <li>\n            <Link to='/livechart'>Live Chart</Link>\n        </li>\n    </ul>\n    <ErrorBoundary>\n    <Suspense fallback={<div>Loading...</div>}>\n    <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route exact path='/livechart' component={LiveChart}/>\n        <Route component={PageNotFound}/>\n    </Switch>\n    </Suspense>\n    </ErrorBoundary>\n    \n    </div>\n    return(routes)\n}\n\nexport default DynamicRouters","import React from 'react';\nimport './App.css';\nimport DynamicRouters from './routers/DynamicRouters';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DynamicRouters/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}